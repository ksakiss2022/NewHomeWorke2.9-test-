package HomeWorke2_8;

public class HomeworkConditions {
    //Задание 1
    //Продолжим работать с нашим приложением для автогонок.
    //
    //Создайте список всех автомобилей, которые участвуют в автогонке. По нашей логике, в гонках участвуют объекты всех
    // классов: «Легковые автомобили», «Грузовые автомобили» и «Автобусы».
    //
    //У каждого автомобиля есть список спонсоров и водитель.
    //
    //Напомним, что водитель может управлять только одним автомобилем в гонках и больше никаким.
    //
    //Один спонсор может поддерживать несколько автомобилей. Спонсором может быть как компания, так и физическое лицо. В качестве параметров спонсор содержит имя (или название компании), а также сумму поддержки. У спонсоров есть метод «спонсировать заезд».
    //
    //Кроме того, каждый автомобиль проходит техобслуживание, поэтому у него есть команда механиков.
    //
    //Создайте новый класс механик с параметрами:
    //
    //имя и фамилия;
    //компания, в которой он работает;
    //с какими автомобилями может работать (например, только с легковыми, грузовыми авто, автобусами или со всеми).
    //Методы:
    //
    //«провести техобслуживание»,
    //«починить машину».
    //Количество механиков, которые могут работать над одной машиной, установите самостоятельно. Один механик может работать с несколькими машинами.
    //
    //Напишите программу, с помощью которой можно узнать, как зовут водителя авто, какие спонсоры и механики у нее есть.

    //
}//Задание 2

//Добавьте новый класс «Станция техобслуживания», в которой реализована очередь из авто. Кроме этого,
// в классе есть методы «добавить авто в очередь» и «провести техосмотр авто».
//
//Напомним, что автобусы не нуждаются в техобслуживании перед заездом, поэтому они в очередь не встают.
//
//Каждый новый объект становится в конец очереди на техобслуживание. Как только машина проходит
// техобслуживание, она должна из очереди удаляться.

//Задание 2
//Подходя к кассе супермаркета, мы выбираем очередь, в которой меньше всего людей. Когда становится слишком много людей,
// один из сотрудников вызывает Галю, открывающую дополнительную кассу.
//
//Напишите программу, в которой имитируется данное поведение.
//
//Создайте 2 очереди (Queue<String>) с максимальной размерностью 5. Заполните обе очереди случайным количеством
// элементов (от 0 до 5 — для каждой очереди свой случайный элемент). В качестве значения используйте имя человека в
// этой очереди (можно использовать любую строку/строки).
//
//Напишите новый метод, принимающий строку (имя человека), который добавляет человека в очередь, где меньше всего людей.
// Если обе очереди заполнены, выведите в консоль просьбу позвать Галю.
//

//Напишите еще один метод, при вызове которого удаляется человек из случайной очереди.

